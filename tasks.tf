# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# Configuration for Nomad tasks.
#
# Theses resources allow Nomad tasks to exchange their workload identity JSON
# Web Tokens (JWTs) for Consul ACL tokens with a given set of permissions to,
# among other things, access Consul's service catalog and KV store from
# templates.

locals {
  role_policies_id = {for role_name, policy_names in var.role_policies : 
                          "${role_name}" => [for policy in consul_acl_policy.tasks : policy.id if contains(policy_names, policy.name)]
                          if length(policy_names) == length([for policy in consul_acl_policy.tasks : policy.id if contains(policy_names, policy.name)])}
}

# consul_acl_binding_rule.tasks binds consul_acl_auth_method.nomad to a role
# in order to specify the permissions granted to tokens generated by the auth
# method.
#
# Refer to Consul's documentation on binding rules for more information.
# https://developer.hashicorp.com/consul/docs/security/acl/auth-methods#binding-rules
resource "consul_acl_binding_rule" "tasks" {
  for_each = var.binding_rules
  auth_method = consul_acl_auth_method.nomad.name
  description = each.value.description
  bind_type   = each.value.bind_type

  # bind_name must match the name of an ACL role to apply to tokens. You may
  # reference values from the ClaimMappings configured in the auth method to
  # make the selection more dynamic.
  #
  # Refer to Consul's documentation on claim mappings for more information.
  # https://developer.hashicorp.com/consul/docs/security/acl/auth-methods/jwt#trusted-identity-attributes-via-claim-mappings
  # bind_name = "${local.bind_name_prefix}-$${value.nomad_namespace}-$${value.nomad_task}-${local.bind_name_suffix}"
  bind_name = each.value.bind_name

  # selector ensures this binding rule is only applied to workload identities
  # for tasks, not services.
  selector = each.value.selector
}


# consul_acl_role.tasks is the ACL role that attaches a set of policies and
# permissions to tokens.
#
# Refer to Consul's documentation on ACL roles for more information.
# https://developer.hashicorp.com/consul/docs/security/acl/acl-roles
resource "consul_acl_role" "tasks" {
  # As an example, this module creates different roles for each Nomad namespace
  # to illustrate the use of claim mappings attributes, but this can be
  # adjusted as needed in a real cluster.
  for_each = local.role_policies_id

  # The role name must match the value set in the binding rule bind_name
  # attributes.
  name       = each.key

  description = "ACL role for Nomad tasks in the ${each.key} Nomad namespace"
  policies    = each.value
}

# consul_acl_policy.tasks is a sample ACL policy that grants tokens read access
# to Consul's service catalog and KV storage.
resource "consul_acl_policy" "tasks" {
 for_each = var.policies
  name        = each.key
  description = "ACL policy used by Nomad tasks"

  rules = each.value
}
